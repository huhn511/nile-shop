"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const open_location_code_1 = require("../src/open-location-code");
const encoding_1 = require("./data/encoding");
class TestData {
    constructor(parts) {
        this.code = parts[0];
        this.latitude = Number.parseFloat(parts[1]);
        this.longitude = Number.parseFloat(parts[2]);
        this.decodedLatitudeLo = Number.parseFloat(parts[3]);
        this.decodedLongitudeLo = Number.parseFloat(parts[4]);
        this.decodedLatitudeHi = Number.parseFloat(parts[5]);
        this.decodedLongitudeHi = Number.parseFloat(parts[6]);
    }
}
describe('Encoding Tests', () => {
    const testDataList = encoding_1.default.map(data => new TestData(data));
    it('testEncodeFromLatLong', () => {
        testDataList.forEach(testData => {
            let codeLength = testData.code.length - 1;
            if (testData.code.indexOf("0") !== -1) {
                codeLength = testData.code.indexOf("0");
            }
            chai_1.expect(testData.code).to.equal(open_location_code_1.default.encode(testData.latitude, testData.longitude, codeLength));
        });
    });
    it('testDecode', () => {
        testDataList.forEach(testData => {
            const decoded = open_location_code_1.default.decode(testData.code);
            chai_1.expect(testData.decodedLatitudeLo).approximately(decoded.latitudeLo, 1e-10);
            chai_1.expect(testData.decodedLongitudeLo).approximately(decoded.longitudeLo, 1e-10);
            chai_1.expect(testData.decodedLatitudeHi).approximately(decoded.latitudeHi, 1e-10);
            chai_1.expect(testData.decodedLongitudeHi).approximately(decoded.longitudeHi, 1e-10);
        });
    });
    it('testClipping', () => {
        chai_1.expect(open_location_code_1.default.encode(-90, 5)).to.equal(open_location_code_1.default.encode(-91, 5));
        chai_1.expect(open_location_code_1.default.encode(90, 5)).to.equal(open_location_code_1.default.encode(91, 5));
        chai_1.expect(open_location_code_1.default.encode(5, 175)).to.equal(open_location_code_1.default.encode(5, -185));
        chai_1.expect(open_location_code_1.default.encode(5, 175)).to.equal(open_location_code_1.default.encode(5, -905));
        chai_1.expect(open_location_code_1.default.encode(5, -175)).to.equal(open_location_code_1.default.encode(5, 905));
    });
    it('testContains', () => {
        testDataList.forEach(testData => {
            const olc = new open_location_code_1.default(testData.code);
            const decoded = open_location_code_1.default.decode(olc.getCode());
            chai_1.expect(olc.contains(decoded.latitudeCenter, decoded.longitudeCenter)).to.equal(true);
            chai_1.expect(olc.contains(decoded.latitudeLo, decoded.longitudeLo)).to.equal(true);
            chai_1.expect(olc.contains(decoded.latitudeHi, decoded.longitudeHi)).to.equal(false);
            chai_1.expect(olc.contains(decoded.latitudeLo, decoded.longitudeHi)).to.equal(false);
            chai_1.expect(olc.contains(decoded.latitudeHi, decoded.longitudeLo)).to.equal(false);
        });
    });
});
//# sourceMappingURL=encoding.test.js.map