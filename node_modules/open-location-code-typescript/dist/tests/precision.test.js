"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const open_location_code_1 = require("../src/open-location-code");
describe('Precision Tests', () => {
    it('testWidthInDegrees', () => {
        chai_1.expect(open_location_code_1.default.decode("67000000+").getLongitudeWidth()).approximately(20.0, 0);
        chai_1.expect(open_location_code_1.default.decode("67890000+").getLongitudeWidth()).approximately(1., 0.01);
        chai_1.expect(open_location_code_1.default.decode("6789CF00+").getLongitudeWidth()).approximately(0.05, 0.01);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+").getLongitudeWidth()).approximately(0.0025, 0.0001);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+JM").getLongitudeWidth()).approximately(0.000125, 0.00001);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+JMP").getLongitudeWidth()).approximately(0.00003125, 0.00001);
    });
    it('testHeightInDegrees', () => {
        chai_1.expect(open_location_code_1.default.decode("67000000+").getLatitudeHeight()).approximately(20.0, 0);
        chai_1.expect(open_location_code_1.default.decode("67890000+").getLatitudeHeight()).approximately(1., 0.01);
        chai_1.expect(open_location_code_1.default.decode("6789CF00+").getLatitudeHeight()).approximately(0.05, 0.01);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+").getLatitudeHeight()).approximately(0.0025, 0.0001);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+JM").getLatitudeHeight()).approximately(0.000125, 0.00001);
        chai_1.expect(open_location_code_1.default.decode("6789CFGH+JMP").getLatitudeHeight()).approximately(0.00003125, 0.00001);
    });
    it("testMaxCodeLength", () => {
        const code = open_location_code_1.default.encode(51.3701125, -10.202665625, 1000000);
        chai_1.expect(code.length).equals(16, "Encoded code should have length of MAX_DIGIT_COUNT + 1 for the plus symbol.");
        chai_1.expect(open_location_code_1.default.isValid(code)).equals(true, "Code should be valid.");
        let tooLongCode = code + "W";
        chai_1.expect(open_location_code_1.default.isValid(tooLongCode)).equals(true, "Too long code with all valid characters should be valid.");
        tooLongCode = code + "U"; // Extend the code with an invalid character and make sure it is invalid.
        chai_1.expect(open_location_code_1.default.isValid(tooLongCode)).equals(false, "Too long code with invalid character should be invalid.");
    });
});
//# sourceMappingURL=precision.test.js.map