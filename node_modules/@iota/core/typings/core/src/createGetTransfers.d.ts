import * as Promise from 'bluebird';
import { Callback, Provider, Transaction } from '../../types';
import { GetNewAddressOptions } from './createGetNewAddress';
export interface GetTransfersOptions {
    readonly start: number;
    readonly end?: number;
    readonly inclusionStates: boolean;
    readonly security: number;
}
export declare const transferToAddressOptions: (start: number, end: number | undefined, security: number) => GetNewAddressOptions;
export declare const getTransfersOptions: (options: Readonly<Partial<{
    start: number;
    end?: number | undefined;
    inclusionStates: boolean;
    security: number;
}>>) => Readonly<{
    start: number;
    end?: number | undefined;
    inclusionStates: boolean;
    security: number;
}>;
/**
 * @ignore
 *
 * @method createGetTransfers
 *
 * @param {Provider} provider - Network provider
 *
 * @return {Function} {@link getTransfers}
 */
export declare const createGetTransfers: (provider: Provider, caller?: string | undefined) => (seed: string, options?: Partial<GetTransfersOptions>, callback?: Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
