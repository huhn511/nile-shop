import * as Promise from 'bluebird';
import { Callback, Provider, Trytes } from '../../types';
export interface GetNewAddressOptions {
    readonly index: number;
    readonly security: number;
    readonly checksum: boolean;
    readonly total?: number;
    readonly returnAll: boolean;
}
export declare type GetNewAddressResult = Trytes | ReadonlyArray<Trytes>;
export declare const createIsAddressUsed: (provider: Provider) => (address: string) => Promise<boolean>;
/**
 * Generates and returns all addresses up to the first unused addresses including it.
 *
 * @method getUntilFirstUnusedAddress
 *
 * @ignore
 *
 * @memberof module:core
 *
 * @param {string} seed
 * @param {options} [options]
 * @param {number} [options.start=0] - Key index offset to start the search at
 * @param {number} [options.security=2] - Security level
 *
 * @return {Promise}
 * @fulfil {Hash[]} List of addresses up to (and including) first unused address
 * @reject {Error}
 * - `INVALID_SEED`
 * - `INVALID_START_OPTION`
 * - `INVALID_SECURITY`
 * - Fetch error
 */
export declare const getUntilFirstUnusedAddress: (isAddressUsed: (address: string) => Promise<boolean>, seed: string, index: number, security: number, returnAll: boolean) => () => Promise<ReadonlyArray<string>>;
export declare const generateAddresses: (seed: string, index: number, security: number, total?: number) => string[];
export declare const applyChecksumOption: (checksum: boolean) => (addresses: string | ReadonlyArray<string>) => string | ReadonlyArray<string>;
export declare const applyReturnAllOption: (returnAll: boolean, total?: number | undefined) => (addresses: ReadonlyArray<string>) => string | ReadonlyArray<string>;
export declare const getNewAddressOptions: (options: Readonly<Partial<GetNewAddressOptions>>) => Readonly<GetNewAddressOptions>;
/**
 * @method createGetNewAddress
 *
 * @param {Provider} provider - Network provider
 *
 * @memberof module:core
 *
 * @return {function} {@link #module_core.getNewAddress `getNewAddress`}
 */
export declare const createGetNewAddress: (provider: Provider, caller?: string | undefined) => (seed: string, options?: Partial<GetNewAddressOptions>, callback?: Callback<string | ReadonlyArray<string>> | undefined) => Promise<string | ReadonlyArray<string>>;
