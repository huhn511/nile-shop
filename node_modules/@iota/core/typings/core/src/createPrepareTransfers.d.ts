import * as Promise from 'bluebird';
import { Address, Callback, NativeGenerateSignatureFunction, Provider, Transaction, // tslint:disable-line no-unused-variable
Transfer, Trytes } from '../../types';
export interface PrepareTransfersOptions {
    readonly inputs: ReadonlyArray<Address>;
    readonly address?: Trytes;
    readonly remainderAddress?: Trytes;
    readonly security: number;
    readonly hmacKey?: Trytes;
    readonly nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction;
}
export declare const getPrepareTransfersOptions: (options: Partial<PrepareTransfersOptions>) => {
    remainderAddress: string | undefined;
    inputs: ReadonlyArray<Address>;
    address?: string | undefined;
    security: number;
    hmacKey?: string | undefined;
    nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction | undefined;
};
export interface PrepareTransfersProps {
    readonly transactions: ReadonlyArray<Transaction>;
    readonly trytes: ReadonlyArray<Trytes>;
    readonly transfers: ReadonlyArray<Transfer>;
    readonly seed: Int8Array;
    readonly security: number;
    readonly inputs: ReadonlyArray<Address>;
    readonly timestamp: number;
    readonly remainderAddress?: Trytes;
    readonly address?: Trytes;
    readonly hmacKey?: Trytes;
    readonly nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction;
}
/**
 * Create a [`prepareTransfers`]{@link #module_core.prepareTransfers} function by passing an optional network `provider`.
 * It is possible to prepare and sign transactions offline, by omitting the provider option.
 *
 * @method createPrepareTransfers
 *
 * @memberof module:core
 *
 * @param {Provider} [provider] - Optional network provider to fetch inputs and remainder address.
 * In case this is omitted, proper input objects and remainder should be passed
 * to [`prepareTransfers`]{@link #module_core.prepareTransfers}, if required.
 *
 * @return {Function} {@link #module_core.prepareTransfers `prepareTransfers`}
 */
export declare const createPrepareTransfers: (provider?: Provider | undefined, now?: () => number, caller?: string | undefined) => (seed: string | Int8Array, transfers: ReadonlyArray<Transfer>, options?: Partial<PrepareTransfersOptions>, callback?: Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
export declare const validatePrepareTransfers: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addHMACPlaceholder: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addTransfers: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const createAddInputs: (provider?: Provider | undefined) => (props: PrepareTransfersProps) => Promise<PrepareTransfersProps>;
export declare const createAddRemainder: (provider?: Provider | undefined) => (props: PrepareTransfersProps) => PrepareTransfersProps | Promise<PrepareTransfersProps>;
export declare const getRemainderAddressStartIndex: (inputs: ReadonlyArray<Address>) => number;
export declare const verifyNotSendingToInputs: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const finalize: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const addSignatures: (props: PrepareTransfersProps) => Promise<PrepareTransfersProps>;
export declare const addHMAC: (props: PrepareTransfersProps) => PrepareTransfersProps;
export declare const asTransactionTrytes: (props: PrepareTransfersProps) => PrepareTransfersProps;
