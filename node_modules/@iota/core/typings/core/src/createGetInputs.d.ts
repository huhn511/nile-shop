import * as Promise from 'bluebird';
import { Callback, Inputs, Provider } from '../../types';
import { GetNewAddressOptions } from './createGetNewAddress';
export interface GetInputsOptions {
    readonly start: number;
    readonly end?: number;
    readonly threshold?: number;
    readonly security: number;
}
/**
 * @method createGetInputs
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider for accessing IRI
 *
 * @return {function} {@link #module_core.getInputs `getInputs`}
 */
export declare const createGetInputs: (provider: Provider) => (seed: string, options?: Partial<GetInputsOptions>, callback?: Callback<Inputs> | undefined) => Promise<Inputs>;
export declare const getInputsOptions: (options: Readonly<Partial<{
    start: number;
    end?: number | undefined;
    threshold?: number | undefined;
    security: number;
}>>) => Readonly<{
    start: number;
    end?: number | undefined;
    threshold?: number | undefined;
    security: number;
}>;
export declare const validateGetInputsOptions: (seed: string, options: GetInputsOptions) => boolean;
export declare const inputsToAddressOptions: ({ start, end, security }: GetInputsOptions) => GetNewAddressOptions;
export declare const createInputsObject: (addresses: ReadonlyArray<string>, balances: ReadonlyArray<number>, start: number, security: number) => Inputs;
export declare const filterByThreshold: ({ inputs, totalBalance }: Inputs, threshold?: number | undefined) => Inputs;
export declare const hasSufficientBalance: (inputs: Inputs, threshold?: number | undefined) => Inputs;
