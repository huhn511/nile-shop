"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var createGetBundlesFromAddresses_1 = require("./createGetBundlesFromAddresses");
var createGetNewAddress_1 = require("./createGetNewAddress");
var defaults = {
    start: 0,
    end: undefined,
    inclusionStates: false,
    security: 2
};
exports.transferToAddressOptions = function (start, end, security) {
    return createGetNewAddress_1.getNewAddressOptions({
        index: start,
        total: end ? end - start : undefined,
        security: security,
        returnAll: true
    });
};
exports.getTransfersOptions = types_1.getOptionsWithDefaults(defaults);
/**
 * @ignore
 *
 * @method createGetTransfers
 *
 * @param {Provider} provider - Network provider
 *
 * @return {Function} {@link getTransfers}
 */
exports.createGetTransfers = function (provider, caller) {
    var getNewAddress = createGetNewAddress_1.createGetNewAddress(provider, 'lib');
    var getBundlesFromAddresses = createGetBundlesFromAddresses_1.createGetBundlesFromAddresses(provider, 'lib');
    /**
     * @ignore
     *
     * @method getTransfers
     *
     * @param {String} seed
     * @param {Object} [options]
     * @param {Number} [options.start=0] Starting key index
     * @paramÂ {Number} [options.end] Ending key index
     * @param {Number} [options.security=2] - Security level to be used for generating addresses
     * @param {Boolean} [options.inclusionStates=false] - Flag that enables fetching of inclusion states
     * for each transfer
     * @param {Function} [callback] - optional callback
     *
     * @returns {Promise}
     * @fulfil {Transaction[][]}
     * @reject {Error}
     * - `INVALID_SEED`
     * - `INVALID_SECURITY_LEVEL`
     * - `INVALID_START_OPTION`
     * - `INVALID_START_END_OPTIONS`
     * - Fetch error
     */
    return function getTransfers(seed, options, callback) {
        if (options === void 0) { options = {}; }
        if (caller !== 'lib') {
            /* tslint:disable-next-line:no-console */
            console.warn('`getTransfers()` is deprecated and will be removed in v2.0.0. ' +
                '`findTransactions()` should be used instead.');
        }
        var _a = exports.getTransfersOptions(options), start = _a.start, end = _a.end, security = _a.security, inclusionStates = _a.inclusionStates;
        return Promise.resolve(guards_1.validate(guards_1.seedValidator(seed), guards_1.securityLevelValidator(security), guards_1.startOptionValidator(start), guards_1.startEndOptionsValidator({ start: start, end: end })))
            .then(function () { return exports.transferToAddressOptions(start, end, security); })
            .then(function (addrOptions) { return getNewAddress(seed, addrOptions); })
            .then(function (addresses) { return getBundlesFromAddresses(types_1.asArray(addresses), inclusionStates); })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createGetTransfers.js.map