"use strict";
exports.__esModule = true;
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createGetTrytes
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.getTrytes `getTrytes`}
 */
exports.createGetTrytes = function (_a) {
    var send = _a.send;
    /**
     * Fetches the transaction trytes given a list of transaction hashes, by calling
     * [`getTrytes`](https://docs.iota.works/iri/api#endpoints/getTrytes) command.
     *
     * @example
     * ```js
     * getTrytes(hashes)
     *   // Parsing as transaction objects
     *   .then(trytes => asTransactionObjects(hashes)(trytes))
     *   .then(transactions => {
     *     // ...
     *   })
     *   .catch(err => {
     *     // ...
     *   })
     * ```
     *
     * @method getTrytes
     *
     * @memberof module:core
     *
     * @param {Array<Hash>} hashes - List of transaction hashes
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {Trytes[]} - Transaction trytes
     * @reject Error{}
     * - `INVALID_TRANSACTION_HASH`: Invalid hash
     * - Fetch error
     */
    return function getTrytes(hashes, callback) {
        return Promise.resolve(guards_1.validate(guards_1.arrayValidator(transaction_1.transactionHashValidator)(hashes)))
            .then(function () {
            return send({
                command: types_1.IRICommand.GET_TRYTES,
                hashes: hashes
            });
        })
            .then(function (_a) {
            var trytes = _a.trytes;
            return trytes;
        })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createGetTrytes.js.map