"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var _1 = require("./");
var createGetBundlesFromAddresses_1 = require("./createGetBundlesFromAddresses");
var createWereAddressesSpentFrom_1 = require("./createWereAddressesSpentFrom");
var defaults = {
    start: 0,
    security: 2
};
exports.getAccountDataOptions = types_1.getOptionsWithDefaults(defaults);
/**
 * @method createGetAccountData
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider for accessing IRI
 *
 * @return {function} {@link #module_core.getAccountData `getAccountData`}
 */
exports.createGetAccountData = function (provider, caller) {
    var getNewAddress = _1.createGetNewAddress(provider, /* Called by */ 'lib');
    var getBundlesFromAddresses = createGetBundlesFromAddresses_1.createGetBundlesFromAddresses(provider, /* Called by */ 'lib');
    var getBalances = _1.createGetBalances(provider);
    var wereAddressesSpentFrom = createWereAddressesSpentFrom_1.createWereAddressesSpentFrom(provider, /* Called by */ 'lib');
    /**
     * Returns an `AccountData` object, containing account information about `addresses`, `transactions`,
     * `inputs` and total account balance.
     *
     * @example
     *
     * ```js
     * getAccountData(seed, {
     *    start: 0,
     *    security: 2
     * })
     *   .then(accountData => {
     *     const { addresses, inputs, transactions, balance } = accountData
     *     // ...
     *   })
     *   .catch(err => {
     *     // ...
     *   })
     * ```
     *
     * @method getAccountData
     *
     * @memberof module:core
     *
     * @param {string} seed
     * @param {object} options
     * @param {number} [options.start=0] - Starting key index
     * @param {number} [options.security = 0] - Security level to be used for getting inputs and addresses
     * @paramÂ {number} [options.end] - Ending key index
     * @param {Callback} [callback] - Optional callback
     *
     * @returns {Promise}
     * @fulfil {AccountData}
     * @reject {Error}
     * - `INVALID_SEED`
     * - `INVALID_START_OPTION`
     * - `INVALID_START_END_OPTIONS`: Invalid combination of start & end options`
     * - Fetch error
     */
    return function (seed, options, callback) {
        if (options === void 0) { options = {}; }
        var _a = exports.getAccountDataOptions(options), start = _a.start, end = _a.end, security = _a.security;
        if (caller !== 'lib') {
            /* tslint:disable-next-line:no-console */
            console.warn('`AccountData.transfers` field is deprecated, and `AccountData.transactions` field should be used instead.\n' +
                'Fetching of full bundles should be done lazily.');
        }
        return (Promise.resolve(guards_1.validate(guards_1.seedValidator(seed), guards_1.securityLevelValidator(security), !!start && guards_1.startOptionValidator(start), !!start && !!end && guards_1.startEndOptionsValidator({ start: start, end: end })))
            // 1. Generate addresses up to first unused address
            .then(function () {
            return getNewAddress(seed, {
                index: start,
                total: end ? end - start : undefined,
                returnAll: true,
                security: security
            });
        })
            // In case getNewAddress returned string, depends on options...
            .then(function (addresses) { return types_1.asArray(addresses); })
            // 2. Query to fetch the complete bundles, balances and spending states of addresses
            // Bundle fetching is intensive task networking wise, and will be removed in v.2.0.0
            .then(function (addresses) {
            return Promise.all([
                getBundlesFromAddresses(addresses, true),
                // findTransactions({ addresses }), // Find transactions instead of getBundlesFromAddress as of v2.0.0
                getBalances(addresses, 100),
                wereAddressesSpentFrom(addresses),
                addresses,
            ]);
        })
            .then(function (_a) {
            var transfers = _a[0] /* transactions */, balances = _a[1].balances, spentStates = _a[2], addresses = _a[3];
            return ({
                // 2. Assign the last address as the latest address
                latestAddress: addresses[addresses.length - 1],
                // 3. Add bundles to account data
                transfers: transfers,
                // 4. As replacement for `transfers` field, `transactions` contains transactions directly
                // related to account addresses. Use of `getBundlesFromAddresses(addresses)` will be replaced by
                // `findTransactions({ address })` in v2.0.0.
                // Full bundles should be fetched lazily if there are relevant use cases...
                transactions: transfers.reduce(function (acc, bundle) {
                    return acc.concat(bundle
                        .filter(function (_a) {
                        var address = _a.address;
                        return addresses.indexOf(address) > -1;
                    })
                        .map(function (transaction) { return transaction.hash; }));
                }, []),
                // transactions,
                // 5. Add balances and extract inputs
                inputs: addresses
                    // We mark unspent addresses with balance as inputs
                    .reduce(function (acc, address, i) {
                    return !spentStates[i] && balances[i] > 0
                        ? acc.concat(types_1.makeAddress(address, balances[i], start + i, security))
                        : acc;
                }, []),
                // List of all account addresses
                addresses: addresses,
                // Calculate total balance
                // Don't count balance of spent addresses!
                balance: balances.reduce(function (acc, balance, i) { return (spentStates[i] ? acc : (acc += balance)); }, 0)
            });
        })
            .asCallback(callback));
    };
};
//# sourceMappingURL=createGetAccountData.js.map