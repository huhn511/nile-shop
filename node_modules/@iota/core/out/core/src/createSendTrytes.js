"use strict";
exports.__esModule = true;
var transaction_1 = require("@iota/transaction");
var transaction_converter_1 = require("@iota/transaction-converter");
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var _1 = require("./");
/**
 * @method createSendTrytes
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {Function} {@link #module_core.sendTrytes `sendTrytes`}
 */
exports.createSendTrytes = function (provider, attachFn) {
    var getTransactionsToApprove = _1.createGetTransactionsToApprove(provider);
    var storeAndBroadcast = _1.createStoreAndBroadcast(provider);
    var attachToTangle = attachFn || _1.createAttachToTangle(provider);
    /**
     * [Attaches to Tangle]{@link #module_core.attachToTangle}, [stores]{@link #module_core.storeTransactions}
     * and [broadcasts]{@link #module_core.broadcastTransactions} a list of transaction trytes.
     *
     * **Note:** Persist the transaction trytes in local storage __before__ calling this command, to ensure
     * that reattachment is possible, until your bundle has been included.
     *
     * @example
     * ```js
     * prepareTransfers(seed, transfers)
     *   .then(trytes => {
     *      // Persist trytes locally before sending to network.
     *      // This allows for reattachments and prevents key reuse if trytes can't
     *      // be recovered by querying the network after broadcasting.
     *
     *      return iota.sendTrytes(trytes, depth, minWeightMagnitude)
     *   })
     *   .then(transactions => {
     *     // ...
     *   })
     *   .catch(err => {
     *     // ...
     *   })
     * ```
     *
     * @method sendTrytes
     *
     * @memberof module:core
     *
     * @param {Trytes[]} trytes - List of trytes to attach, store and broadcast
     *
     * @param {number} depth - The depth at which Random Walk starts. A value of `3` is typically used by wallets,
     * meaning that RW starts 3 milestones back.
     *
     * @param {number} minWeightMagnitude - Minimum number of trailing zeros in transaction hash. This is used to
     * search for a valid `nonce`. Currently it is `14` on mainnet & spamnet and `9` on most other testnets.
     *
     * @param {string} [reference] - Optional reference transaction hash
     *
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {Transaction[]}  Returns list of attached transactions
     * @reject {Error}
     * - `INVALID_TRANSACTION_TRYTES`
     * - `INVALID_DEPTH`
     * - `INVALID_MIN_WEIGHT_MAGNITUDE`
     * - Fetch error, if connected to network
     */
    return function sendTrytes(trytes, depth, minWeightMagnitude, reference, callback) {
        if (reference && typeof reference === 'function') {
            callback = reference;
            reference = undefined;
        }
        return Promise.resolve(guards_1.validate(guards_1.arrayValidator(transaction_1.transactionTrytesValidator)(trytes), guards_1.depthValidator(depth), guards_1.minWeightMagnitudeValidator(minWeightMagnitude)))
            .then(function () { return getTransactionsToApprove(depth, reference); })
            .then(function (_a) {
            var trunkTransaction = _a.trunkTransaction, branchTransaction = _a.branchTransaction;
            return attachToTangle(trunkTransaction, branchTransaction, minWeightMagnitude, trytes);
        })
            .tap(function (attachedTrytes) { return storeAndBroadcast(attachedTrytes); })
            .then(function (attachedTrytes) { return attachedTrytes.map(function (t) { return transaction_converter_1.asTransactionObject(t); }); })
            .asCallback(typeof arguments[3] === 'function' ? arguments[3] : callback);
    };
};
//# sourceMappingURL=createSendTrytes.js.map