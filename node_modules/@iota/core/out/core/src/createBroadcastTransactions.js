"use strict";
exports.__esModule = true;
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createBroadcastTransactions
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.broadcastTransactions `broadcastTransactions`}
 */
exports.createBroadcastTransactions = function (_a) {
    var send = _a.send;
    /**
     * Broadcasts an list of _attached_ transaction trytes to the network by calling
     * [`boradcastTransactions`](https://docs.iota.org/iri/api#endpoints/broadcastTransactions) command.
     * Tip selection and Proof-of-Work must be done first, by calling
     * [`getTransactionsToApprove`]{@link #module_core.getTransactionsToApprove} and
     * [`attachToTangle`]{@link #module_core.attachToTangle} or an equivalent attach method or remote
     * [`PoWbox`](https://powbox.testnet.iota.org/), which is a development tool.
     *
     * You may use this method to increase odds of effective transaction propagation.
     *
     * **Note:** Persist the transaction trytes in local storage __before__ calling this command, to ensure
     * that reattachment is possible, until your bundle has been included.
     *
     * @example
     *
     * ```js
     * broadcastTransactions(trytes)
     *   .then(trytes => {
     *      // ...
     *   })
     *   .catch(err => {
     *     // ...
     *   })
     * ```
     *
     * @method broadcastTransactions
     *
     * @memberof module:core
     *
     * @param {TransactionTrytes[]} trytes - Attached Transaction trytes
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {Trytes[]} Attached transaction trytes
     * @reject {Error}
     * - `INVALID_ATTACHED_TRYTES`: Invalid array of attached trytes
     * - Fetch error
     */
    return function (trytes, callback) {
        return Promise.resolve(guards_1.validate(guards_1.arrayValidator(transaction_1.attachedTrytesValidator)(trytes)))
            .then(function () {
            return send({
                command: types_1.IRICommand.BROADCAST_TRANSACTIONS,
                trytes: trytes
            });
        })
            .then(function () { return trytes; })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createBroadcastTransactions.js.map