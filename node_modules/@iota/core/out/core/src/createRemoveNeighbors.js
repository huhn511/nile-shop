"use strict";
exports.__esModule = true;
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createRemoveNeighbors
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.removeNeighbors `removeNeighbors`}
 */
exports.createRemoveNeighbors = function (_a) {
    var send = _a.send;
    /**
     * Removes a list of neighbors from the connected IRI node by calling
     * [`removeNeighbors`]{@link https://docs.iota.works/iri/api#endpoints/removeNeighbors} command.
     * Assumes `removeNeighbors` command is available on the node.
     *
     * This method has temporary effect until your IRI node relaunches.
     *
     * @method removeNeighbors
     *
     * @memberof module:core
     *
     * @param {Array} uris - List of URI's
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {number} Number of neighbors that were removed
     * @reject {Error}
     * - `INVALID_URI`: Invalid uri
     * - Fetch error
     */
    return function (uris, callback) {
        return Promise.resolve(guards_1.validate(guards_1.arrayValidator(guards_1.uriValidator)(uris)))
            .then(function () {
            return send({
                command: types_1.IRICommand.REMOVE_NEIGHBORS,
                uris: uris
            });
        })
            .then(function (res) { return res.removedNeighbors; })
            .asCallback(callback);
    };
};
//# sourceMappingURL=createRemoveNeighbors.js.map