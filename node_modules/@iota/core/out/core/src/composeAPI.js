"use strict";
exports.__esModule = true;
var http_client_1 = require("@iota/http-client");
var _1 = require("./");
var createGetBundlesFromAddresses_1 = require("./createGetBundlesFromAddresses");
var createGetTransfers_1 = require("./createGetTransfers");
function returnType(func) {
    return {}; // tslint:disable-line no-object-literal-type-assertion
}
exports.returnType = returnType;
/**
 * Composes API object from it's components
 *
 * @method composeApi
 *
 * @memberof module:core
 *
 * @param {object} [settings={}] - Connection settings
 * @param {Provider} [settings.network] - Network provider, defaults to `http-client`.
 * @param {string} [settings.provider=http://localhost:14265] Uri of IRI node
 * @param {function} [settings.attachToTangle] - Function to override
 * [`attachToTangle`]{@link #module_core.attachToTangle} with
 * @param {string | number} [settings.apiVersion=1] - IOTA Api version to be sent as `X-IOTA-API-Version` header.
 * @param {number} [settings.requestBatchSize=1000] - Number of search values per request.
 *
 * @return {API}
 */
exports.composeAPI = function (settings) {
    if (settings === void 0) { settings = {}; }
    var provider = http_client_1.createHttpClient(settings);
    var attachToTangle = settings.attachToTangle || _1.createAttachToTangle(provider);
    /**
     * Defines network provider configuration and [`attachToTangle`]{@link #module_core.attachToTangle} method.
     *
     * @method setSettings
     *
     * @memberof API
     *
     * @param {object} settings - Provider settings object
     * @param {string} [settings.provider] - Http `uri` of IRI node
     * @param {Provider} [settings.network] - Network provider to override with
     * @param {function} [settings.attachToTangle] - AttachToTangle function to override with
     * [`attachToTangle`]{@link #module_core.attachToTangle} with
     */
    function setSettings(newSettings) {
        if (newSettings === void 0) { newSettings = {}; }
        if (newSettings.attachToTangle) {
            attachToTangle = newSettings.attachToTangle;
        }
        if (newSettings.network) {
            provider = newSettings.network;
        }
        provider.setSettings(newSettings);
    }
    function overrideNetwork(network) {
        provider = network;
    }
    /**
     * Overides default [`attachToTangle`]{@link #module_core.attachToTangle} with a local equivalent or
     * [`PoWBox`](https://powbox.devnet.iota.org/)
     *
     * @method overrideAttachToTangle
     *
     * @memberof API
     *
     * @param {function} attachToTangle - Function to override
     * [`attachToTangle`]{@link #module_core.attachToTangle} with
     */
    function overrideAttachToTangle(attachFn) {
        attachToTangle = attachFn;
    }
    /** @namespace API */
    return {
        // IRI commands
        addNeighbors: _1.createAddNeighbors(provider),
        attachToTangle: attachToTangle,
        broadcastTransactions: _1.createBroadcastTransactions(provider),
        checkConsistency: _1.createCheckConsistency(provider),
        findTransactions: _1.createFindTransactions(provider),
        getBalances: _1.createGetBalances(provider),
        getInclusionStates: _1.createGetInclusionStates(provider),
        getNeighbors: _1.createGetNeighbors(provider),
        getNodeInfo: _1.createGetNodeInfo(provider),
        getTips: _1.createGetTips(provider),
        getTransactionsToApprove: _1.createGetTransactionsToApprove(provider),
        getTrytes: _1.createGetTrytes(provider),
        interruptAttachingToTangle: _1.createInterruptAttachingToTangle(provider),
        removeNeighbors: _1.createRemoveNeighbors(provider),
        storeTransactions: _1.createStoreTransactions(provider),
        // wereAddressesSpentFrom: createWereAddressesSpentFrom(provider),
        sendCommand: provider.send,
        // Wrapper methods
        broadcastBundle: _1.createBroadcastBundle(provider),
        getAccountData: _1.createGetAccountData(provider),
        getBundle: _1.createGetBundle(provider),
        getBundlesFromAddresses: createGetBundlesFromAddresses_1.createGetBundlesFromAddresses(provider),
        getLatestInclusion: _1.createGetLatestInclusion(provider),
        getNewAddress: _1.createGetNewAddress(provider),
        getTransactionObjects: _1.createGetTransactionObjects(provider),
        findTransactionObjects: _1.createFindTransactionObjects(provider),
        getInputs: _1.createGetInputs(provider),
        getTransfers: createGetTransfers_1.createGetTransfers(provider),
        isPromotable: _1.createIsPromotable(provider),
        isReattachable: _1.createIsReattachable(provider),
        prepareTransfers: _1.createPrepareTransfers(provider),
        promoteTransaction: _1.createPromoteTransaction(provider, attachToTangle),
        replayBundle: _1.createReplayBundle(provider, attachToTangle),
        // sendTransfer: createSendTransfer(provider, attachToTangle),
        sendTrytes: _1.createSendTrytes(provider, attachToTangle),
        storeAndBroadcast: _1.createStoreAndBroadcast(provider),
        traverseBundle: _1.createTraverseBundle(provider),
        setSettings: setSettings,
        overrideAttachToTangle: overrideAttachToTangle,
        overrideNetwork: overrideNetwork
    };
};
exports.apiType = returnType(exports.composeAPI);
//# sourceMappingURL=composeAPI.js.map