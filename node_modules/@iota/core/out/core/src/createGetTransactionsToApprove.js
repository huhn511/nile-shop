"use strict";
exports.__esModule = true;
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var errors_1 = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
/**
 * @method createGetTransactionsToApprove
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider
 *
 * @return {function} {@link #module_core.getTransactionsToApprove `getTransactionsToApprove`}
 */
exports.createGetTransactionsToApprove = function (_a) {
    var send = _a.send;
    /**
     * Does the _tip selection_ by calling
     * [`getTransactionsToApprove`](https://docs.iota.works/iri/api#endpoints/getTransactionsToApprove) command.
     * Returns a pair of approved transactions, which are chosen randomly after validating the transaction trytes,
     * the signatures and cross-checking for conflicting transactions.
     *
     * Tip selection is executed by a Random Walk (RW) starting at random point in given `depth`
     * ending up to the pair of selected tips. For more information about tip selection please refer to the
     * [whitepaper](https://iota.org/IOTA_Whitepaper.pdf).
     *
     * The `reference` option allows to select tips in a way that the reference transaction is being approved too.
     * This is useful for promoting transactions, for example with
     * [`promoteTransaction`]{@link #module_core.promoteTransaction}.
     *
     * @example
     *
     * ```js
     * const depth = 3
     * const minWeightMagnitude = 14
     *
     * getTransactionsToApprove(depth)
     *   .then(transactionsToApprove =>
     *      attachToTangle(minWeightMagnitude, trytes, { transactionsToApprove })
     *   )
     *   .then(storeAndBroadcast)
     *   .catch(err => {
     *     // handle errors here
     *   })
     * ```
     *
     * @method getTransactionsToApprove
     *
     * @memberof module:core
     *
     * @param {number} depth - The depth at which Random Walk starts. A value of `3` is typically used by wallets,
     * meaning that RW starts 3 milestones back.
     * @param {Hash} [reference] - Optional reference transaction hash
     * @param {Callback} [callback] - Optional callback
     *
     * @return {Promise}
     * @fulfil {trunkTransaction, branchTransaction} A pair of approved transactions
     * @reject {Error}
     * - `INVALID_DEPTH`
     * - `INVALID_REFERENCE_HASH`: Invalid reference hash
     * - Fetch error
     */
    return function attachToTangle(depth, reference, callback) {
        return Promise.resolve(guards_1.validate(guards_1.depthValidator(depth), !!reference && transaction_1.transactionHashValidator(reference, errors_1.INVALID_REFERENCE_HASH)))
            .then(function () {
            return send({
                command: types_1.IRICommand.GET_TRANSACTIONS_TO_APPROVE,
                depth: depth,
                reference: reference
            });
        })
            .then(function (_a) {
            var trunkTransaction = _a.trunkTransaction, branchTransaction = _a.branchTransaction;
            return ({
                trunkTransaction: trunkTransaction,
                branchTransaction: branchTransaction
            });
        })
            .asCallback(typeof arguments[1] === 'function' ? arguments[1] : callback);
    };
};
//# sourceMappingURL=createGetTransactionsToApprove.js.map