"use strict";
exports.__esModule = true;
var bundle_validator_1 = require("@iota/bundle-validator");
var transaction_1 = require("@iota/transaction");
var Promise = require("bluebird");
var guards_1 = require("../../guards");
var _1 = require("./");
exports.validateBundle = function (bundle) { return guards_1.validate(bundle_validator_1.bundleValidator(bundle)); };
/**
 * @method createGetBundle
 *
 * @memberof module:core
 *
 * @param {Provider} provider - Network provider for accessing IRI
 *
 * @return {function} {@link #module_core.getBundle `getBundle`}
 */
exports.createGetBundle = function (provider) {
    var traverseBundle = _1.createTraverseBundle(provider);
    /**
     * Fetches and validates the bundle given a _tail_ transaction hash, by calling
     * [`traverseBundle`]{@link #module_core.traverseBundle} and traversing through `trunkTransaction`.
     *
     * @example
     *
     * ```js
     * getBundle(tail)
     *    .then(bundle => {
     *        // ...
     *    })
     *    .catch(err => {
     *        // handle errors
     *    })
     * ```
     *
     * @method getBundle
     *
     * @memberof module:core
     *
     * @param {Hash} tailTransactionHash - Tail transaction hash
     * @param {Callback} [callback] - Optional callback
     *
     * @returns {Promise}
     * @fulfil {Transaction[]} Bundle as array of transaction objects
     * @reject {Error}
     * - `INVALID_TRANSACTION_HASH`
     * - `INVALID_TAIL_HASH`: Provided transaction is not tail (`currentIndex !== 0`)
     * - `INVALID_BUNDLE`: Bundle is syntactically invalid
     * - Fetch error
     */
    return function getBundle(tailTransactionHash, callback) {
        return Promise.resolve(guards_1.validate(transaction_1.transactionHashValidator(tailTransactionHash)))
            .then(function () { return traverseBundle(tailTransactionHash); })
            .tap(exports.validateBundle)
            .asCallback(callback);
    };
};
//# sourceMappingURL=createGetBundle.js.map