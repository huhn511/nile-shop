"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var checksum_1 = require("@iota/checksum");
var Promise = require("bluebird");
var errors_1 = require("../../errors");
var guards_1 = require("../../guards");
var types_1 = require("../../types");
var _1 = require("./");
// Filters out all receiving or 0-value transactions
// Note: Transaction value < 0 is a tx-out (spending transaction)
var filterSpendingTransactions = function (transactions) { return transactions.filter(function (tx) { return tx.value < 0; }); };
// Appends the confirmation status to each transaction
var withInclusionState = function (provider, transactions) {
    return _1.createGetLatestInclusion(provider)(transactions.map(function (tx) { return tx.hash; })).then(function (states) {
        return transactions.map(function (tx, i) { return (__assign({}, tx, { confirmed: states[i] })); });
    });
};
// Checks whether any address in the list has at least one confirmed transaction
var hasConfirmedTxs = function (addresses, transactions) {
    return addresses.map(function (addr) { return transactions.some(function (tx) { return !!tx.confirmed && tx.address === addr; }); });
};
// An address may be considered "reattachable" if it has either:
// (A) No spending transactions, OR
// (B) No _confirmed_ spending transactions
exports.createIsReattachable = function (provider) {
    var findTransactionObjects = _1.createFindTransactionObjects(provider);
    return function isReattachable(inputAddresses, callback) {
        var useArray = Array.isArray(inputAddresses);
        var inputAddressArray = types_1.asArray(inputAddresses);
        var addresses;
        /* tslint:disable-next-line:no-console */
        console.warn('`isReattachable()` has been deprecated and will be removed in v2.0.0.');
        return (Promise["try"](function () {
            // 1. Remove checksum and validate addresses
            guards_1.validate(guards_1.arrayValidator(guards_1.trytesValidator)(inputAddressArray, errors_1.INVALID_ADDRESS));
            addresses = inputAddressArray.map(checksum_1.removeChecksum);
            guards_1.validate(guards_1.arrayValidator(guards_1.hashValidator)(addresses));
        })
            // 2. Find all transactions for these addresses
            .then(function () { return findTransactionObjects({ addresses: addresses }); })
            // 3. Filter out all 0-value or receiving transactions
            .then(filterSpendingTransactions)
            .then(function (spendingTransactions) {
            // 4. Case (A) Break early if no spending transactions found
            if (spendingTransactions.length === 0) {
                return useArray ? addresses.map(function (_) { return true; }) : true;
            }
            // 5. Add the inclusion state for value-transactions
            return (withInclusionState(provider, spendingTransactions)
                // 6. Map addresses to inclusion state
                .then(function (txsWithInclusionState) { return hasConfirmedTxs(addresses, txsWithInclusionState); })
                // 7. Case (B) No confirmed spending transactions found;
                //    isReattachable === reverse inclusion state
                .then(function (confirmedTransactions) { return confirmedTransactions.map(function (conf) { return !conf; }); })
                .then(function (reattachable) { return (useArray ? reattachable : reattachable[0]); }));
        })
            .asCallback(callback));
    };
};
//# sourceMappingURL=createIsReattachable.js.map