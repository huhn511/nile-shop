"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var checksum_1 = require("@iota/checksum");
var http_client_1 = require("@iota/http-client");
var samples_1 = require("@iota/samples");
var ava_1 = require("ava");
var src_1 = require("../../src");
var createPrepareTransfers_1 = require("../../src/createPrepareTransfers");
require("./nocks/prepareTransfers");
var inputs = [
    {
        address: 'FJHSSHBZTAKQNDTIKJYCZBOZDGSZANCZSWCNWUOCZXFADNOQSYAHEJPXRLOVPNOQFQXXGEGVDGICLMOXX',
        keyIndex: 0,
        security: 2,
        balance: 3
    },
    {
        address: '9DZXPFSVCSSWXXQPFMWLGFKPBAFTHYMKMZCPFHBVHXPFNJEIJIEEPKXAUBKBNNLIKWHJIYQDFWQVELOCB',
        keyIndex: 1,
        security: 2,
        balance: 4
    },
];
ava_1["default"]('getRemainderAddressStartIndex', function (t) { return t.is(createPrepareTransfers_1.getRemainderAddressStartIndex(inputs), 2); });
var transfers = [
    {
        address: checksum_1.addChecksum('A'.repeat(81)),
        value: 3,
        tag: 'TAG',
        message: '9'
    },
    {
        address: checksum_1.addChecksum('B'.repeat(81)),
        value: 3,
        tag: 'TAG'
    },
];
var zeroValueTransfer = [
    {
        address: '9'.repeat(81),
        value: 0,
        message: 'TEST9MESSAGE',
        tag: 'TEST9TAG'
    },
];
var expectedZeroValueTrytes = [

];
var remainderAddress = samples_1.addresses[2];
var now = function () { return 1522219924; };
var prepareTransfers = src_1.createPrepareTransfers(undefined, now, 'lib');
var prepareTransfersWithNetwork = src_1.createPrepareTransfers(http_client_1.createHttpClient(), now, 'lib');
ava_1["default"]('prepareTransfers() prepares the correct array of trytes offline.', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var trytes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareTransfers('SEED', transfers, { inputs: inputs, remainderAddress: remainderAddress })];
            case 1:
                trytes = _a.sent();
                t.deepEqual(trytes, samples_1.trytes, 'prepareTransfers() should prepare the correct array of trytes.');
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('prepareTransfers() does not mutate original transfers object offline.', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var transfersCopy;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                transfersCopy = transfers.map(function (transfer) { return (__assign({}, transfer)); });
                return [4 /*yield*/, prepareTransfers('SEED', transfersCopy, { inputs: inputs, remainderAddress: remainderAddress, hmacKey: '9'.repeat(81) })];
            case 1:
                _a.sent();
                t.deepEqual(transfers, transfersCopy, 'prepareTransfers() should not mutate original transfers object.');
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('prepareTransfers() with network prepares the correct array of trytes.', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var trytes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareTransfersWithNetwork('SEED', transfers)];
            case 1:
                trytes = _a.sent();
                t.deepEqual(trytes, samples_1.trytes, 'prepareTranfers() should prepare the correct array of trytes.');
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('prepareTransfer() prepares correct trytes for zero value transfers', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var zeroValueTrytes;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareTransfersWithNetwork('SEED', zeroValueTransfer)];
            case 1:
                zeroValueTrytes = _a.sent();
                t.deepEqual(zeroValueTrytes, expectedZeroValueTrytes, 'prepareTransfers() should prepare the correct trytes for zero value transfers');
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"].cb('prepareTransfers() invokes callback', function (t) {
    prepareTransfers('SEED', transfers, { inputs: inputs, remainderAddress: remainderAddress }, t.end);
});
ava_1["default"].cb('prepareTransfers() passes correct arguments to callback', function (t) {
    prepareTransfers('SEED', transfers, { inputs: inputs, remainderAddress: remainderAddress }, function (err, res) {
        t.is(err, null, 'prepareTransfers() should pass null as first argument in callback for successful calls.');
        t.deepEqual(res, samples_1.trytes, 'prepareTransfers() should pass the correct trytes as second argument in callback');
        t.end();
    });
});
ava_1["default"]('prepareTransfers() throws intuitive error when provided invalid transfers array', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var invalidTransfer;
    return __generator(this, function (_a) {
        invalidTransfer = {
            address: checksum_1.addChecksum('A'.repeat(81)),
            value: 3
        };
        t.is(t.throws(function () { return prepareTransfers('SEED', invalidTransfer); }).message, "Invalid transfer array: " + invalidTransfer, 'prepareTransfers() should throw intuitive error when provided invalid transfers array');
        return [2 /*return*/];
    });
}); });
ava_1["default"]('prepareTransfers() throws error for inputs without security level.', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var input;
    return __generator(this, function (_a) {
        input = {
            address: 'I'.repeat(81),
            keyIndex: 0,
            balance: 1
        };
        t.is(t.throws(function () {
            return prepareTransfers('SEED', [
                {
                    address: 'A'.repeat(81),
                    value: 1
                },
            ], {
                inputs: [input]
            });
        }).message, "Invalid input: " + input, 'prepareTransfers() should throw error for inputs without security level.');
        return [2 /*return*/];
    });
}); });
//# sourceMappingURL=prepareTransfers.test.js.map