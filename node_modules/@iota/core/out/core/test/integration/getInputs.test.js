"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var http_client_1 = require("@iota/http-client");
var ava_1 = require("ava");
var errors_1 = require("../../../errors");
var createGetInputs_1 = require("../../src/createGetInputs");
require("./nocks/findTransactions");
var getBalances_1 = require("./nocks/getBalances");
require("./nocks/wereAddressesSpentFrom");
var getInputs = createGetInputs_1.createGetInputs(http_client_1.createHttpClient());
var seed = 'SEED';
var balances = getBalances_1.balancesResponse.balances;
var inputs = {
    inputs: [
        {
            address: getBalances_1.getBalancesCommand.addresses[0],
            balance: balances[0],
            keyIndex: 0,
            security: 2
        },
        {
            address: getBalances_1.getBalancesCommand.addresses[2],
            balance: balances[2],
            keyIndex: 2,
            security: 2
        },
    ],
    totalBalance: balances[0] + balances[2]
};
ava_1["default"]('inputsToAddressOptions() translates getInputs() options to compatible getNewAddress() options', function (t) {
    t.deepEqual(createGetInputs_1.inputsToAddressOptions({
        start: 3,
        end: 9,
        security: 2,
        threshold: 100
    }), {
        index: 3,
        total: 7,
        security: 2,
        returnAll: true,
        checksum: false
    }, 'inputsToAddressOptions() should translate getInputs() options with `end`, to getNewAddress() compatible options');
    t.deepEqual(createGetInputs_1.inputsToAddressOptions({
        start: 3,
        end: undefined,
        security: 2,
        threshold: 100
    }), {
        index: 3,
        total: undefined,
        security: 2,
        returnAll: true,
        checksum: false
    }, 'inputsToAddressOptions() should translate getInputs() options without `end`, to getNewAddress() compatible options');
});
ava_1["default"]('createInputsObject() aggregates addresses and balances', function (t) {
    t.deepEqual(createGetInputs_1.createInputsObject(getBalances_1.getBalancesCommand.addresses, balances, 0, 2), inputs, 'createInputsObject() should aggregate addresses and balances correctly');
});
ava_1["default"]('hasSufficientBalance() throws error for insufficient balance', function (t) {
    t.is(t.throws(function () { return createGetInputs_1.hasSufficientBalance(inputs, 110); }, Error).message, "" + errors_1.INSUFFICIENT_BALANCE, 'hasSufficientBalance() should throw error for insufficient balance');
});
ava_1["default"]('getInputs() resolves to correct inputs', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, getInputs(seed, { start: 0, threshold: 100 })];
            case 1:
                _b.apply(_a, [_c.sent(),
                    inputs,
                    'getInputs() should resolve to correct balances']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getInputs() rejects with correct errors for invalid input', function (t) {
    var invalidSeed = 'asdasDSFDAFD';
    var invalidStartEndOptions = {
        start: 10,
        end: 9
    };
    t.is(t.throws(function () { return getInputs(invalidSeed); }, Error).message, errors_1.INVALID_SEED + ": " + invalidSeed, 'getInputs() should throw correct error for invalid seed');
    t.is(t.throws(function () { return getInputs(seed, invalidStartEndOptions); }, Error).message, errors_1.INVALID_START_END_OPTIONS + ": " + invalidStartEndOptions, 'getInputs() should throw correct error for invalid start & end options');
});
ava_1["default"]('getInputs() with threshold rejects with correct error if balance is insufficient', function (t) {
    return getInputs(seed, { start: 0, threshold: 110 })["catch"](function (err) {
        return t.is(err.message, "" + errors_1.INSUFFICIENT_BALANCE, 'getInputs() with threshold should reject with correct error if balance is insufficient');
    });
});
ava_1["default"].cb('getInputs() passes correct arguments to callback', function (t) {
    getInputs(seed, { start: 0, threshold: 100 }, function (err, res) {
        t.is(err, null, 'getInputs() should pass null as first argument in callback for successuful requests');
        t.deepEqual(res, inputs, 'getInputs() should pass the correct response as second argument in callback');
        t.end();
    });
});
//# sourceMappingURL=getInputs.test.js.map