"use strict";
exports.__esModule = true;
var samples_1 = require("@iota/samples");
var nock = require("nock");
var types_1 = require("../../../../types");
var headers_1 = require("./headers");
exports.emptyFindTransactionsCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: [samples_1.addresses[2]]
};
exports.emptyFindTransactionsResponse = {
    hashes: []
};
exports.findTransactionsByAddressesCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: [samples_1.addresses[1]]
};
exports.findTransactionsByBundlesCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    bundles: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByTagsCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    tags: ['A'.repeat(27), 'B'.repeat(27)]
};
exports.findTransactionsByApproveesCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    approvees: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByAddressesResponse = {
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByBundlesResponse = {
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByTagsResponse = {
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByApproveesResponse = {
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.findTransactionsByAddressesNock = nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', exports.findTransactionsByAddressesCommand)
    .reply(200, exports.findTransactionsByAddressesResponse);
exports.findTransactionsByBundlesNock = nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', exports.findTransactionsByBundlesCommand)
    .reply(200, exports.findTransactionsByBundlesResponse);
exports.findTransactionsByTagsNock = nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', exports.findTransactionsByTagsCommand)
    .reply(200, exports.findTransactionsByTagsResponse);
exports.findTransactionsByApproveesNock = nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', exports.findTransactionsByApproveesCommand)
    .reply(200, exports.findTransactionsByApproveesResponse);
exports.emptyFindTransactionsNock = nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', exports.emptyFindTransactionsCommand)
    .reply(200, exports.emptyFindTransactionsResponse);
exports.findTransactionsResponse = {
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: samples_1.addresses
})
    .reply(200, exports.findTransactionsResponse);
nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    bundles: ['9'.repeat(81)]
})
    .reply(200, exports.findTransactionsResponse);
nock('http://localhost:14265', headers_1["default"])
    .persist()
    .post('/', {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: [samples_1.addresses[1], samples_1.addresses[2]]
})
    .reply(200, exports.findTransactionsResponse);
//# sourceMappingURL=findTransactions.js.map