"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var http_client_1 = require("@iota/http-client");
var ava_1 = require("ava");
var errors_1 = require("../../../errors");
var createGetNewAddress_1 = require("../../src/createGetNewAddress");
require("./nocks/findTransactions");
require("./nocks/wereAddressesSpentFrom");
var samples_1 = require("@iota/samples");
var client = http_client_1.createHttpClient();
var getNewAddress = createGetNewAddress_1.createGetNewAddress(client, 'lib');
var isAddressUsed = createGetNewAddress_1.createIsAddressUsed(client);
ava_1["default"]('getNewAddress() resolves to correct new address', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = t).is;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 0 })];
            case 1:
                _b.apply(_a, [_c.sent(), samples_1.newAddress, 'getNewAddress() should resolve to correct new address']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getNewAddress() with total option resolves to correct addresses', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 0, total: 2 })];
            case 1:
                _b.apply(_a, [_c.sent(),
                    samples_1.addresses.slice(0, 2),
                    'getNewAddress() with `total` option resolves to correct addresses']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getNewAddress() with `returnAll` option resolves to correct addresses', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 1, returnAll: true })];
            case 1:
                _b.apply(_a, [_c.sent(),
                    samples_1.addresses.slice(1, 3),
                    'getNewAddress() with `returnAll` option should resolve to addresses from `start` up to new address']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getNewAddresses() with `checksum` option resolves to correct addresses', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _b = (_a = t).is;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 0, checksum: true })];
            case 1:
                _b.apply(_a, [_g.sent(),
                    samples_1.newAddressWithChecksum,
                    'getNewAddress() with `checksum` option should resolve to correct address']);
                _d = (_c = t).deepEqual;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 0, total: 2, checksum: true })];
            case 2:
                _d.apply(_c, [_g.sent(),
                    samples_1.addressesWithChecksum.slice(0, 2),
                    'getNewAddress() with `total` & `checksum` options resolves to correct addresses']);
                _f = (_e = t).deepEqual;
                return [4 /*yield*/, getNewAddress(samples_1.seed, { index: 1, returnAll: true, checksum: true })];
            case 3:
                _f.apply(_e, [_g.sent(),
                    samples_1.addressesWithChecksum.slice(1, 3),
                    'getNewAddress() with `checksum` & `returnAll` options should resolve to correct addresses']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getNewAddress() rejects with correct errors for invalid arguments', function (t) {
    var invalidSeed = 'asdasDSFDAFD';
    t.is(t.throws(function () { return getNewAddress(invalidSeed, { index: 0 }); }, Error).message, errors_1.INVALID_SEED + ": " + invalidSeed, 'getNewAddress() should throw correct error for invalid seed');
});
ava_1["default"]('getNewAddress() rejects with correct errors for `total=0`', function (t) {
    t.is(t.throws(function () { return getNewAddress(samples_1.seed, { index: 0, total: 0 }); }, Error).message, errors_1.INVALID_TOTAL_OPTION + ": " + 0, 'getNewAddress() should throw correct error for `total=0`');
});
ava_1["default"].cb('getNewAddress() invokes callback', function (t) {
    getNewAddress(samples_1.seed, { index: 0, total: 1 }, t.end);
});
ava_1["default"].cb('getNewAddress() passes correct arguments to callback', function (t) {
    getNewAddress(samples_1.seed, { index: 0 }, function (err, res) {
        t.is(err, null, 'getNewAddress() should pass null as first argument in callback for successuful requests');
        t.is(res, samples_1.newAddress, 'getNewAddress() should pass the correct response as second argument in callback');
        t.end();
    });
});
ava_1["default"]('isAddressUsed() resolves to correct state', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _b = (_a = t).is;
                return [4 /*yield*/, isAddressUsed(samples_1.addresses[0])];
            case 1:
                _b.apply(_a, [_g.sent(), true, 'isAddressUsed() resolves to `true` for spent address']);
                _d = (_c = t).is;
                return [4 /*yield*/, isAddressUsed(samples_1.addresses[1])];
            case 2:
                _d.apply(_c, [_g.sent(), true, 'isAddressUsed() resolves to `true` for address with transactions']);
                _f = (_e = t).is;
                return [4 /*yield*/, isAddressUsed(samples_1.addresses[1])];
            case 3:
                _f.apply(_e, [_g.sent(), true, 'isAddressUsed() resolves to `false` result for unused address']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('getUntilFirstUnusedAddress() resolves to correct new address', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var index, security, _a, _b, _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                index = 0;
                security = 2;
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, createGetNewAddress_1.getUntilFirstUnusedAddress(isAddressUsed, samples_1.seed, index, security, false)()];
            case 1:
                _b.apply(_a, [_e.sent(),
                    [samples_1.newAddress],
                    'getNewAddress() with `returnAll: false` should resolve to correct new address']);
                _d = (_c = t).deepEqual;
                return [4 /*yield*/, createGetNewAddress_1.getUntilFirstUnusedAddress(isAddressUsed, samples_1.seed, index, security, true)()];
            case 2:
                _d.apply(_c, [_e.sent(),
                    samples_1.addresses.slice(0, 3),
                    'getUntilFristUnusedAddress() with `returnAll: true` should resolve to correct address from start to new address']);
                return [2 /*return*/];
        }
    });
}); });
ava_1["default"]('applyReturnAllOption() returns correct address or address array', function (t) {
    t.deepEqual(createGetNewAddress_1.applyReturnAllOption(true, 0)(samples_1.addresses), samples_1.addresses, 'applyReturnAllOption() should return address array for `returnAll: true`');
    t.is(createGetNewAddress_1.applyReturnAllOption(false, 0)(samples_1.addresses), samples_1.newAddress, 'applyReturnAllOption() should return new address string for `returnAll: false`');
    t.deepEqual(createGetNewAddress_1.applyReturnAllOption(false, 2)(samples_1.addresses), samples_1.addresses, 'applyReturnAllOption() should return address array if called with `total`');
});
ava_1["default"]('applyChecksumOption() resolves to correct addresses', function (t) { return __awaiter(_this, void 0, void 0, function () {
    var _a, _b, _c, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0:
                _b = (_a = t).deepEqual;
                return [4 /*yield*/, createGetNewAddress_1.applyChecksumOption(true)(samples_1.newAddress)];
            case 1:
                _b.apply(_a, [_g.sent(),
                    samples_1.newAddressWithChecksum,
                    'applyChecksumOptions() with `checksum = true` should add checksum to single address']);
                _d = (_c = t).deepEqual;
                return [4 /*yield*/, createGetNewAddress_1.applyChecksumOption(true)(samples_1.addresses.slice(0, 1))];
            case 2:
                _d.apply(_c, [_g.sent(),
                    samples_1.addressesWithChecksum.slice(0, 1),
                    'applyChecksumOptions() with `checksum = true` should add checksum to address array']);
                _f = (_e = t).is;
                return [4 /*yield*/, createGetNewAddress_1.applyChecksumOption(false)(samples_1.newAddress)];
            case 3:
                _f.apply(_e, [_g.sent(),
                    samples_1.newAddress,
                    'applyChecksumOptions() with `checksum = false` should not add checksum']);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=getNewAddress.test.js.map