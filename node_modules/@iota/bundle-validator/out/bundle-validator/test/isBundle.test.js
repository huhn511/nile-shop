"use strict";
exports.__esModule = true;
var samples_1 = require("@iota/samples");
var ava_1 = require("ava");
var src_1 = require("../src");
ava_1["default"]('isBundle() returns true for valid bundle.', function (t) {
    t.is(src_1["default"](samples_1.bundle), true, 'isBundle() should return true for valid bundle.');
});
ava_1["default"]('isBundle() returns true for valid zero-value bundle', function (t) {
    t.is(src_1["default"](samples_1.bundleWithZeroValue), true, 'isBundle() should return true for valid zero-value bundle');
});
ava_1["default"]('isBundle() returns false for bundle with invalid lastIndex.', function (t) {
    t.is(src_1["default"](samples_1.bundleWithInvalidLastIndex), false, 'isBundle() should return false for last transaction in bundle: currentIndex !== lastIndex.');
});
ava_1["default"]('isBundle() returns false for bundle with invalid bundle hash.', function (t) {
    t.is(src_1["default"](samples_1.bundleWithInvalidBundleHash), false, 'isBundle() should return false for bundle with invalid bundle hash.');
});
ava_1["default"]('isBundle() returns false for bundle with invalid signature.', function (t) {
    t.is(src_1["default"](samples_1.bundleWithInvalidSignature), false, 'isBundle() should return false for bundle with invalid signature.');
});
ava_1["default"]('isBundle() returns false for bundle with invalid transaction order.', function (t) {
    t.is(src_1["default"](samples_1.bundleWithInvalidTransactionOrder), false, 'isBundle() should return false for bundle with invalid transaction order.');
});
ava_1["default"]('isBundle() returns false for bundle with non-zero value sum.', function (t) {
    t.is(src_1["default"](samples_1.bundleWithInvalidValueSum), false, 'isBundle() should return false for bundle with non-zero value sum.');
});
//# sourceMappingURL=isBundle.test.js.map