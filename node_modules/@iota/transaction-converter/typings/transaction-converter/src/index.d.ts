/** @module transaction-converter */
import '../../typed-array';
import { Transaction, Trytes } from '../../types';
export { Transaction };
export declare function asTransactionTrytes(transactions: Transaction): Trytes;
export declare function asTransactionTrytes(transactions: ReadonlyArray<Transaction>): ReadonlyArray<Trytes>;
/**
 * Converts transaction trytes of 2673 trytes into a transaction object.
 *
 * @method asTransactionObject
 *
 * @param {Trytes} trytes - Transaction trytes
 *
 * @return {Transaction} Transaction object
 */
export declare const asTransactionObject: (trytes: string, hash?: string | undefined) => Transaction;
/**
 * Converts a list of transaction trytes into list of transaction objects.
 * Accepts a list of hashes and returns a mapper. In cases hashes are given,
 * the mapper function map them to converted objects.
 *
 * @method asTransactionObjects
 *
 * @param {Hash[]} [hashes] - Optional list of known hashes.
 * Known hashes are directly mapped to transaction objects,
 * otherwise all hashes are being recalculated.
 *
 * @return {Function} {@link #module_transaction.transactionObjectsMapper `transactionObjectsMapper`}
 */
export declare const asTransactionObjects: (hashes?: ReadonlyArray<string> | undefined) => (trytes: ReadonlyArray<string>) => Transaction[];
export declare const asFinalTransactionTrytes: (transactions: ReadonlyArray<Transaction>) => string[];
export declare const transactionObject: (trytes: string) => Transaction;
export declare const transactionTrytes: (transaction: Transaction) => string;
