/**
 * @module transaction
 */
import { Validator } from '../../guards';
import '../../typed-array';
import { Hash, Transaction, Trytes } from '../../types';
export { Transaction };
/**
 * Calculates the transaction hash out of 8019 transaction trits.
 *
 * @method transactionHash
 *
 * @param {Int8Array} trits - Int8Array of 8019 transaction trits
 *
 * @return {Hash} Transaction hash
 */
export declare const transactionHash: (trits: Int8Array) => string;
/**
 * Checks if input is valid transaction object.
 *
 * @method isTransaction
 *
 * @param {object} tx
 *
 * @return {boolean}
 */
export declare const isTransaction: (tx: any) => tx is Transaction;
/**
 * Checks if given transaction object is tail transaction.
 * A tail transaction is one with `currentIndex=0`.
 *
 * @method isTailTransaction
 *
 * @param {object} transaction
 *
 * @return {boolean}
 */
export declare const isTailTransaction: (transaction: any) => transaction is Transaction;
/**
 * Checks if input is correct transaction hash (81 trytes)
 *
 * @method isTransactionHash
 *
 * @param {string} hash
 * @param {number} mwm
 *
 * @return {boolean}
 */
export declare const isTransactionHash: (hash: any, minWeightMagnitude?: number | undefined) => hash is string;
/**
 * Checks if input is correct transaction trytes (2673 trytes)
 *
 * @method isTransactionTrytes
 *
 * @param {string} trytes
 * @param {number} minWeightMagnitude
 *
 * @return {boolean}
 */
export declare const isTransactionTrytes: (trytes: any, minWeightMagnitude?: number | undefined) => trytes is string;
/**
 * Checks if input is valid attached transaction trytes.
 * For attached transactions last 241 trytes are non-zero.
 *
 * @method isAttachedTrytes
 *
 * @param {string} trytes
 *
 * @return {boolean}
 */
export declare const isAttachedTrytes: (trytes: any) => trytes is string;
export declare const isAttachedTrytesArray: (x: ReadonlyArray<any>) => boolean;
export declare const isTransactionArray: (x: ReadonlyArray<any>) => boolean;
export declare const isTransactionHashArray: (x: ReadonlyArray<any>) => boolean;
export declare const transactionValidator: Validator<Transaction>;
export declare const tailTransactionValidator: Validator<Transaction>;
export declare const transactionHashValidator: Validator<Hash>;
export declare const transactionTrytesValidator: Validator<Trytes>;
export declare const attachedTrytesValidator: Validator<Trytes>;
export declare const validateTransaction: (transaction: any) => boolean;
export declare const validateTailTransaction: (transaction: any) => boolean;
export declare const validateTransactionHash: (hash: any, msg?: string | undefined) => boolean;
export declare const validateTransactionTrytes: (trytes: any) => boolean;
export declare const validateAttachedTrytes: (trytes: any) => boolean;
