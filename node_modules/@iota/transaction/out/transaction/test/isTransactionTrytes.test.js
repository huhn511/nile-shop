"use strict";
exports.__esModule = true;
var samples_1 = require("@iota/samples");
var ava_1 = require("ava");
var src_1 = require("../src");
ava_1["default"]('isTransactionTrytes() returns true for valid transaction trytes.', function (t) {
    t.is(src_1.isTransactionTrytes(samples_1.transactionTrytes), true, 'isTransactionTrytes() should return true for valid transaction trytes.');
});
ava_1["default"]('isTransactionTrytes() returns true if provided trytes are valid and minWeightMagnitude <= weightMagnitude.', function (t) {
    t.is(src_1.isTransactionTrytes(samples_1.transactionTrytes, 3), true, 'isTransactionTrytes() returns true if provided trytes are valid and minWeightMagnitude <= weightMagnitude.');
});
ava_1["default"]('isTransactionTrytes() returns false if provided trytes are invalid and minWeightMagnitude <= weightMagnitude.', function (t) {
    t.is(src_1.isTransactionTrytes(samples_1.transactionTrytes.slice(4), 3), false, 'isTransactionTrytes() returns false if provided trytes are invalid and minWeightMagnitude <= weightMagnitude.');
});
ava_1["default"]('isTransactionTrytes() returns false if provided trytes are valid and minWeightMagnitude > weightMagnitude.', function (t) {
    t.is(src_1.isTransactionTrytes(samples_1.transactionTrytes, 5), false, 'isTransactionTrytes() returns false if provided trytes are valid and minWeightMagnitude > weightMagnitude.');
});
ava_1["default"]('isTransactionTrytes() returns false for invalid transaction trytes.', function (t) {
    var invalidLength = samples_1.transactionTrytes.slice(6);
    var invalidTrytes = "us" + samples_1.transactionTrytes.slice(2);
    t.is(src_1.isTransactionTrytes(invalidLength), false, 'isTransactionTrytes() should return false for transaction trytes of invalid length.');
    t.is(src_1.isTransactionTrytes(invalidTrytes), false, 'isTransactionTrytes() should return false for invalid trytes.');
});
//# sourceMappingURL=isTransactionTrytes.test.js.map