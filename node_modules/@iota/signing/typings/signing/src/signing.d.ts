import * as Promise from 'bluebird';
import '../../typed-array';
import { NativeGenerateSignatureFunction } from '../../types';
export declare const TRYTE_WIDTH = 3;
export declare const MIN_TRYTE_VALUE = -13;
export declare const MAX_TRYTE_VALUE = 13;
export declare const NUMBER_OF_SECURITY_LEVELS = 3;
export declare const HASH_LENGTH = 243;
export declare const FRAGMENT_LENGTH: number;
export declare const NUMBER_OF_FRAGMENT_CHUNKS: number;
export declare const NORMALIZED_FRAGMENT_LENGTH: number;
/**
 * @method subseed
 *
 * @param {Int8Array} seed - Seed trits
 * @param {number} index - Private key index
 *
 * @return {Int8Array} subseed trits
 */
export declare function subseed(seed: Int8Array, index: number): Int8Array;
/**
 * @method key
 *
 * @param {Int8Array} subseedTrits - Subseed trits
 * @param {number} numberOfFragments - Number of private key fragments
 *
 * @return {Int8Array} Private key trits
 */
export declare function key(subseedTrits: Int8Array, numberOfFragments: number): Int8Array;
/**
 * @method digests
 *
 * @param {Int8Array} key - Private key trits
 *
 * @return {Int8Array}
 */
export declare function digests(key: Int8Array): Int8Array;
/**
 * @method address
 *
 * @param {Int8Array} digests - Digests trits
 *
 * @return {Int8Array} Address trits
 */
export declare function address(digests: Int8Array): Int8Array;
/**
 * @method digest
 *
 * @param {array} normalizedBundleFragment - Normalized bundle fragment
 * @param {Int8Array} signatureFragment - Signature fragment trits
 *
 * @return {Int8Array} Digest trits
 */
export declare function digest(normalizedBundleFragment: Int8Array, signatureFragment: Int8Array, // tslint:disable-line
normalizedBundleFragmentOffset?: number, signatureFragmentOffset?: number): Int8Array;
/**
 * @method signatureFragment
 *
 * @param {array} normalizeBundleFragment - normalized bundle fragment
 * @param {keyFragment} keyFragment - key fragment trits
 *
 * @return {Int8Array} Signature Fragment trits
 */
export declare function signatureFragment(normalizedBundleFragment: Int8Array, keyFragment: Int8Array, normalizedBundleFragmentOffset?: number, keyFragmentOffset?: number): Int8Array;
export declare function signatureFragments(seed: Int8Array, index: number, numberOfFragments: number, bundle: Int8Array, nativeGenerateSignatureFunction?: NativeGenerateSignatureFunction): Promise<ReadonlyArray<Int8Array>>;
/**
 * @method validateSignatures
 *
 * @param {Int8Array} expectedAddress - Expected address trytes
 * @param {Array<Int8Array>} signatureFragments - Array of signatureFragments
 * @param {Int8Array} bundle - Bundle hash
 *
 * @return {boolean}
 */
export declare function validateSignatures(expectedAddress: Int8Array, signatureFragments: ReadonlyArray<Int8Array>, // tslint:disable-line
bundle: Int8Array): boolean;
/**
 * Normalizes the bundle hash, with resulting digits summing to zero.
 *
 * @method normalizedBundle
 *
 * @param {Int8Array} bundle - Bundle hash to be normalized
 *
 * @return {Int8Array} Normalized bundle hash
 */
export declare const normalizedBundle: (bundle: Int8Array) => Int8Array;
