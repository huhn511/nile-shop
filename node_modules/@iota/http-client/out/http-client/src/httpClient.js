"use strict";
/** @module http-client */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var _a;
var Promise = require("bluebird");
var types_1 = require("../../types");
var request_1 = require("./request");
var settings_1 = require("./settings");
var BATCH_SIZE = 1000;
/* Batchable keys for each command */
exports.batchableKeys = (_a = {},
    _a[types_1.IRICommand.FIND_TRANSACTIONS] = ['addresses', 'approvees', 'bundles', 'tags'],
    _a[types_1.IRICommand.GET_BALANCES] = ['addresses'],
    _a[types_1.IRICommand.GET_INCLUSION_STATES] = ['tips', 'transactions'],
    _a[types_1.IRICommand.GET_TRYTES] = ['hashes'],
    _a);
exports.isBatchableCommand = function (command) {
    return command.command === types_1.IRICommand.FIND_TRANSACTIONS ||
        command.command === types_1.IRICommand.GET_BALANCES ||
        command.command === types_1.IRICommand.GET_INCLUSION_STATES ||
        command.command === types_1.IRICommand.GET_TRYTES;
};
exports.getKeysToBatch = function (command, batchSize) {
    if (batchSize === void 0) { batchSize = BATCH_SIZE; }
    return Object.keys(command).filter(function (key) {
        return exports.batchableKeys[command.command].indexOf(key) > -1 &&
            Array.isArray(command[key]) &&
            command[key].length > batchSize;
    });
};
/**
 * Create an http client to access IRI http API.
 *
 * @method createHttpClient
 *
 * @param {object} [settings={}]
 * @param {string} [settings.provider=http://localhost:14265] Uri of IRI node
 * @param {string | number} [settings.apiVersion=1] - IOTA Api version to be sent as `X-IOTA-API-Version` header.
 * @param {number} [settings.requestBatchSize=1000] - Number of search values per request.
 * @return Object
 */
exports.createHttpClient = function (settings) {
    var currentSettings = settings_1.getSettingsWithDefaults(__assign({}, settings));
    return {
        /**
         * @member send
         *
         * @param {object} command
         *
         * @return {object} response
         */
        send: function (command) {
            return Promise["try"](function () {
                var provider = currentSettings.provider, requestBatchSize = currentSettings.requestBatchSize, apiVersion = currentSettings.apiVersion;
                if (exports.isBatchableCommand(command)) {
                    var keysToBatch = exports.getKeysToBatch(command, requestBatchSize);
                    if (keysToBatch.length) {
                        return request_1.batchedSend(command, keysToBatch, requestBatchSize, provider, apiVersion);
                    }
                }
                return request_1.send(command, provider, apiVersion);
            });
        },
        /**
         * @member setSettings
         *
         * @param {object} [settings={}]
         * @param {string} [settings.provider=http://localhost:14265] Uri of IRI node
         * @param {string | number} [settings.apiVersion=1] - IOTA Api version to be sent as `X-IOTA-API-Version` header.
         * @param {number} [settings.requestBatchSize=1000] - Number of search values per request.
         */
        setSettings: function (newSettings) {
            currentSettings = settings_1.getSettingsWithDefaults(__assign({}, currentSettings, newSettings));
        }
    };
};
//# sourceMappingURL=httpClient.js.map