"use strict";
exports.__esModule = true;
var nock = require("nock");
var types_1 = require("../../types");
var send_1 = require("./send");
exports.apiVersion = 1;
exports.requestBatchSize = 2;
// Test batched requests for:
//
// 1. findTransactions
exports.findTransactionsCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)],
    tags: ['A'.repeat(27), 'B'.repeat(27), 'C'.repeat(27)],
    approvees: ['D'.repeat(81)]
};
exports.findTransactionsCommandA = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81)],
    approvees: ['D'.repeat(81)]
};
exports.findTransactionsCommandB = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['C'.repeat(81)],
    approvees: ['D'.repeat(81)]
};
exports.findTransactionsCommandC = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    tags: ['A'.repeat(27), 'B'.repeat(27)],
    approvees: ['D'.repeat(81)]
};
exports.findTransactionsCommandD = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    tags: ['C'.repeat(27)],
    approvees: ['D'.repeat(81)]
};
exports.findTransactionsResponseA = {
    hashes: ['A'.repeat(81), 'C'.repeat(81)]
};
exports.findTransactionsResponseB = {
    hashes: ['B'.repeat(81), 'D'.repeat(81)]
};
exports.findTransactionsResponseC = {
    hashes: ['A'.repeat(81), 'D'.repeat(81), 'E'.repeat(81)]
};
exports.findTransactionsResponseD = {
    hashes: ['B'.repeat(81), 'A'.repeat(81)]
};
exports.expectedFindTransactionsResponse = {
    hashes: ['A'.repeat(81)]
};
exports.findTransactionsNockBatchA = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.findTransactionsCommandA)
    .reply(200, exports.findTransactionsResponseA);
exports.findTransactionsNockBatchB = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.findTransactionsCommandB)
    .reply(200, exports.findTransactionsResponseB);
exports.findTransactionsNockBatchC = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.findTransactionsCommandC)
    .reply(200, exports.findTransactionsResponseC);
exports.findTransactionsNockBatchD = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.findTransactionsCommandD)
    .reply(200, exports.findTransactionsResponseD);
// 2. getTrytes
exports.getTrytesCommand = {
    command: types_1.IRICommand.GET_TRYTES,
    hashes: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)]
};
exports.getTrytesCommandA = {
    command: types_1.IRICommand.GET_TRYTES,
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
exports.getTrytesCommandB = {
    command: types_1.IRICommand.GET_TRYTES,
    hashes: ['C'.repeat(81)]
};
exports.expectedGetTrytesResponse = {
    trytes: ['A'.repeat(2673), 'B'.repeat(2673), 'C'.repeat(2673)]
};
exports.getTrytesResponseA = {
    trytes: ['A'.repeat(2673), 'B'.repeat(2673)]
};
exports.getTrytesResponseB = {
    trytes: ['C'.repeat(2673)]
};
exports.getTrytesNockBatchA = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getTrytesCommandA)
    .reply(200, exports.getTrytesResponseA);
exports.getTrytesNockBatchB = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getTrytesCommandB)
    .reply(200, exports.getTrytesResponseB);
// 3. getBalances
exports.getBalancesCommand = {
    command: types_1.IRICommand.GET_BALANCES,
    addresses: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)],
    threshold: 100
};
exports.getBalancesCommandA = {
    command: types_1.IRICommand.GET_BALANCES,
    addresses: ['A'.repeat(81), 'B'.repeat(81)],
    threshold: 100
};
exports.getBalancesCommandB = {
    command: types_1.IRICommand.GET_BALANCES,
    addresses: ['C'.repeat(81)],
    threshold: 100
};
exports.expectedGetBalancesResponse = {
    balances: ['1', '2', '3'],
    milestone: 'B'.repeat(81),
    milestoneIndex: 2,
    duration: 0
};
exports.getBalancesResponseA = {
    balances: ['1', '2'],
    milestone: 'B'.repeat(81),
    milestoneIndex: 2,
    duration: 0
};
exports.getBalancesResponseB = {
    balances: ['3'],
    milestone: 'A'.repeat(81),
    milestoneIndex: 1,
    duration: 0
};
exports.getBalancesNockBatchA = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getBalancesCommandA)
    .reply(200, exports.getBalancesResponseA);
exports.getBalancesNockBatchB = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getBalancesCommandB)
    .reply(200, exports.getBalancesResponseB);
// 4. getInclusionStates
exports.getInclusionStatesCommand = {
    command: types_1.IRICommand.GET_INCLUSION_STATES,
    transactions: ['A'.repeat(81), 'B'.repeat(81), 'C'.repeat(81)],
    tips: ['T'.repeat(81)]
};
exports.getInclusionStatesCommandA = {
    command: types_1.IRICommand.GET_INCLUSION_STATES,
    transactions: ['A'.repeat(81), 'B'.repeat(81)],
    tips: ['T'.repeat(81)]
};
exports.getInclusionStatesCommandB = {
    command: types_1.IRICommand.GET_INCLUSION_STATES,
    transactions: ['C'.repeat(81)],
    tips: ['T'.repeat(81)]
};
exports.expectedGetInclusionStatesResponse = {
    states: [true, false, true],
    duration: 0
};
exports.getInclusionStatesResponseA = {
    states: [true, false],
    duration: 0
};
exports.getInclusionStatesResponseB = {
    states: [true],
    duration: 0
};
exports.getInclusionStatesNockBatchA = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getInclusionStatesCommandA)
    .reply(200, exports.getInclusionStatesResponseA);
exports.geInclusionStatesNockBatchB = nock('http://localhost:24265', send_1.headers(exports.apiVersion))
    .persist()
    .post('/', exports.getInclusionStatesCommandB)
    .reply(200, exports.getInclusionStatesResponseB);
//# sourceMappingURL=batchedSend.js.map