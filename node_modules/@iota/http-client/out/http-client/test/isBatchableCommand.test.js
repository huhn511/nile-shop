"use strict";
exports.__esModule = true;
var ava_1 = require("ava");
var types_1 = require("../../types");
var httpClient_1 = require("../src/httpClient");
var findTransactionsCommand = {
    command: types_1.IRICommand.FIND_TRANSACTIONS,
    addresses: ['A'.repeat(81), 'B'.repeat(81)]
};
var getTrytesCommand = {
    command: types_1.IRICommand.GET_TRYTES,
    hashes: ['A'.repeat(81), 'B'.repeat(81)]
};
var getBalancesCommand = {
    command: types_1.IRICommand.GET_BALANCES,
    addresses: ['A'.repeat(81), 'B'.repeat(81)],
    threshold: 100
};
var getInclusionStatesCommand = {
    command: types_1.IRICommand.GET_INCLUSION_STATES,
    transactions: ['A'.repeat(81), 'B'.repeat(81)],
    tips: ['T'.repeat(81)]
};
var nonBatchableCommand = {
    command: 'command',
    key: ['key']
};
ava_1.test('isBatchableCommand() returns true for batchable findTransactions commands.', function (t) {
    t.is(httpClient_1.isBatchableCommand(findTransactionsCommand), true);
});
ava_1.test('isBatchableCommand() returns true for batchable getTrytes commands.', function (t) {
    t.is(httpClient_1.isBatchableCommand(getTrytesCommand), true);
});
ava_1.test('isBatchableCommand() returns true for batchable getBalances commands.', function (t) {
    t.is(httpClient_1.isBatchableCommand(getBalancesCommand), true);
});
ava_1.test('isBatchableCommand() returns true for batchable getInclusionStates commands.', function (t) {
    t.is(httpClient_1.isBatchableCommand(getInclusionStatesCommand), true);
});
ava_1.test('isBatchableCommand() returns false for non-batchable commands.', function (t) {
    t.is(httpClient_1.isBatchableCommand(nonBatchableCommand), false);
});
//# sourceMappingURL=isBatchableCommand.test.js.map